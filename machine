#!/bin/sh
# Be prepared to turn your box into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "homebrew/services"
tap "homebrew/cask"
tap "homebrew/cask-fonts"
tap "universal-ctags/universal-ctags"

# Unix
brew "universal-ctags", args: ["HEAD"]
brew "antigen"
brew "bash" # macos has an very old version of bash
brew "git"
brew "git-flow-avh"
brew "openssl"
brew "openssh"
brew "the_silver_searcher"
brew "vim"
brew "watchman"
brew "zsh"

# Programming language prerequisites and package managers
brew "autoconf"
brew "automake"
brew "bison"
brew "bison27"
brew "coreutils"
brew "freetype"
brew "gettext"
brew "icu4c"
brew "jpeg"
brew "libiconv"
brew "libpng"
brew "libtool"
brew "libxslt"
brew "libyaml" # should come after openssl
brew "readline"
brew "libedit"
brew "unixodbc"
brew "yarn"
brew "zlib"

# antigen
brew "antigen"

# Appstore
brew "mas"

# Some tools
cask "docker"
cask "gpg-suite"
cask "iterm2"
cask "xquartz"

# Font with ligatures and for powerline
cask "font-fira-code"
EOF

fancy_echo "Setting up zsh..."
append_to_zshrc 'source /usr/local/share/antigen/antigen.zsh'
append_to_zshrc '# Libs'
append_to_zshrc 'antigen use oh-my-zsh'
append_to_zshrc '# Plugins'
append_to_zshrc 'antigen bundle git'
append_to_zshrc 'antigen bundle zsh-users/zsh-syntax-highlighting'``
append_to_zshrc 'antigen bundle ssh-agent'
append_to_zshrc 'antigen bundle node'
append_to_zshrc 'antigen bundle npm'
append_to_zshrc 'antigen bundle npx'
append_to_zshrc 'antigen bundle brew'
append_to_zshrc 'antigen bundle brew-cask'
append_to_zshrc 'antigen bundle gem'
append_to_zshrc 'antigen bundle osx'
append_to_zshrc '# Theme'  
append_to_zshrc 'antigen theme caiogondim/bullet-train.zsh bullet-train'
append_to_zshrc 'antigen apply'

fancy_echo "Configuring asdf version manager ..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.5.0
  append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
fi

add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

source "$HOME/.asdf/asdf.sh"
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
# add_or_update_asdf_plugin "php" "https://github.com/odarriba/asdf-php.git"

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

fancy_echo "Installing latest Ruby ..."
install_asdf_language "ruby"
gem update --system
gem_install_or_update "bundler"
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node ..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

# fancy_echo "Installing latest PHP ..."
# export PATH="$(brew --prefix bison)/bin:$(brew --prefix icu4c)/bin:$(brew --prefix icu4c)/sbin:$PATH" PHP_CONFIGURE_OPTIONS="--with-iconv=$(brew --prefix libiconv) --with-openssl=$(brew --prefix openssl) --with-zlib-dir=$(brew --prefix zlib)"
# install_asdf_language "php"

# Settings for macos
if [ -f "./.machine.macos" ]; then
  fancy_echo "Set macos settings from ~/.machine.macos ..."
  . "./.machine.macos"
fi

if [ -f "./.machine.apps" ]; then
  fancy_echo "Installing apps from ~/.machine.apps ..."
  . "./.machine.apps"
fi

fancy_echo "Cleaning up old Homebrew formulae ..."
brew cleanup
